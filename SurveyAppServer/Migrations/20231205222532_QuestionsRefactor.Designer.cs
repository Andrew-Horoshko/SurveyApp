// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyAppServer;

#nullable disable

namespace SurveyAppServer.Migrations
{
    [DbContext(typeof(SurveyAppDbContext))]
    [Migration("20231205222532_QuestionsRefactor")]
    partial class QuestionsRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("SurveyAppServer.Models.Answers.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MultipleChoiceQuestionQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerId");

                    b.HasIndex("MultipleChoiceQuestionQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.QuestionBase", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tooltip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuestionBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SurveyAttemptId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyAttemptId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyAttempt", b =>
                {
                    b.Property<int>("SurveyAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SurveyAttemptId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAttempts");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyRating", b =>
                {
                    b.Property<int>("SurveyRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SurveyRatingId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyRatings");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.UserManual", b =>
                {
                    b.Property<int>("UserManualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SurveyId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserManualId");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("UserManuals");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SurveyUser", b =>
                {
                    b.Property<int>("AccessibleByUsersUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessibleSurveysSurveyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccessibleByUsersUserId", "AccessibleSurveysSurveyId");

                    b.HasIndex("AccessibleSurveysSurveyId");

                    b.ToTable("UserSurveys", (string)null);
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("SurveyAppServer.Models.Questions.QuestionBase");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.OpenTextQuestion", b =>
                {
                    b.HasBaseType("SurveyAppServer.Models.Questions.QuestionBase");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("OpenTextQuestion");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("SurveyAppServer.Models.Questions.QuestionBase");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AnswerId");

                    b.HasDiscriminator().HasValue("SingleChoiceQuestion");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Answers.Answer", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Questions.MultipleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceQuestionQuestionId");

                    b.HasOne("SurveyAppServer.Models.Questions.QuestionBase", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.QuestionBase", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyAnswer", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Answers.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyAppServer.Models.Questions.QuestionBase", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyAppServer.Models.Surveys.SurveyAttempt", "SurveyAttempt")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("SurveyAttempt");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyAttempt", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyAppServer.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyRating", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyAppServer.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.UserManual", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Surveys.Survey", "Survey")
                        .WithOne("UserManual")
                        .HasForeignKey("SurveyAppServer.Models.Surveys.UserManual", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyUser", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AccessibleByUsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyAppServer.Models.Surveys.Survey", null)
                        .WithMany()
                        .HasForeignKey("AccessibleSurveysSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasOne("SurveyAppServer.Models.Answers.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserManual")
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyAppServer.Models.Surveys.SurveyAttempt", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("SurveyAppServer.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
